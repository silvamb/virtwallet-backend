service: virtwallet-resources

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:stage, 'eu-west-1'}
  stackTags:
    Project: virtwallet
    Service: resources

resources:
  Resources:
    VirtwalletTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions: 
          - AttributeName: "PK"
            AttributeType: "S"
          - AttributeName: "SK"
            AttributeType: "S"
        BillingMode: PAY_PER_REQUEST
        KeySchema: 
          - AttributeName: "PK"
            KeyType: "HASH"
          - AttributeName: "SK"
            KeyType: "RANGE"
        TableName: virtwallet-${self:provider.stage}

    VirtwalletUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        AccountRecoverySetting:
          RecoveryMechanisms: 
            - Name: admin_only
              Priority: 1
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: True
        AliasAttributes:
          - phone_number
        AutoVerifiedAttributes:
          - email
        MfaConfiguration: "OFF"
        Schema:
          - AttributeDataType: String
            Name: email
            Required: True
          - AttributeDataType: String
            Name: phone_number
            Required: True
        UserPoolName: virtwallet-${self:provider.stage}-userpool

    VirtwalletMaterialUIAppClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: "Material UI ${self:provider.stage} client"
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED
        UserPoolId:
          Ref: VirtwalletUserPool

    VirtwalletUserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain 
      Properties:
        UserPoolId:
          Ref: VirtwalletUserPool 
        Domain: "virtwallet-${self:provider.stage}"

    VirtwalletRestApiGW:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: VirtwalletApi-${self:provider.stage}
    
    VirtwalletRestApiAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: cognito-${opt:stage, self:provider.stage}
        Type: COGNITO_USER_POOLS
        IdentitySource: method.request.header.Authorization
        ProviderARNs:
          - "Fn::GetAtt":
              - VirtwalletUserPool
              - Arn
        RestApiId:
          Ref: VirtwalletRestApiGW

    UserFilesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${file(../../config.${self:provider.stage}.yml):userFilesBucket}

  Outputs:
    VirtwalletRestApiId:
      Value:
        Ref: VirtwalletRestApiGW
      Export:
        Name: Virtwallet-${self:provider.stage}-RestApiId

    VirtwalletRestApiRootResourceId:
      Value:
        Fn::GetAtt:
          - VirtwalletRestApiGW
          - RootResourceId
      Export:
        Name: Virtwallet-${self:provider.stage}-RootResourceId

    VirtwalletRestApiAuthorizerId:
      Value:
        Ref: VirtwalletRestApiAuthorizer
      Export:
        Name: Virtwallet-${self:provider.stage}-RestApiAuthorizerId