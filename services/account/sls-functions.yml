apigw-event-handler:
  handler: src/accountLambda.handle
  events:
    - http:
        path: account
        method: post
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId: ${self:custom.restApiAuthorizerId}
        cors: ${self:custom.cors}
    - http:
        path: account
        method: get
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId: ${self:custom.restApiAuthorizerId}
        cors: ${self:custom.cors}
    - http:
        path: account/{accountId}
        method: get
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId: ${self:custom.restApiAuthorizerId}
        parameters:
          paths:
            accountId: true
        cors: ${self:custom.cors}
    - http:
        path: account/{accountId}
        method: put
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId: ${self:custom.restApiAuthorizerId}
        parameters:
          paths:
            accountId: true
        cors: ${self:custom.cors}
    - http:
        path: account/{accountId}
        method: delete
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId: ${self:custom.restApiAuthorizerId}
        parameters:
          paths:
            accountId: true
        cors: ${self:custom.cors}
  environment:
    CORS_ALLOWED_ORIGIN: ${self:custom.cors.origin, None}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/virtwallet"